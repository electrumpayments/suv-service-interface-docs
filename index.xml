<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Single Use Voucher Service Interface</title>
    <link>https://electrumpayments.github.io/suv-service-interface-docs/</link>
    <description>Recent content on Single Use Voucher Service Interface</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the Apache 2.0 license</copyright>
    
	<atom:link href="https://electrumpayments.github.io/suv-service-interface-docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Topics</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/advanced-topic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/advanced-topic/</guid>
      <description>Request ID Construction And Handling Generation of UUIDs for voucher provision request messages is an important step in the request process. The id field of a VoucherRequest is the single field guaranteed to always allow an entity to locate all messages pertaining to a voucher request (as well as subsequent related messages). It is therefore important that the ID value generated by a client is unique for that client. If you are developing a client implementation, please take note to generate IDs as random UUID&amp;rsquo;s, as defined for a variant 4 UUID by RFC 4122.</description>
    </item>
    
    <item>
      <title>Definitions</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/specification/definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/specification/definitions/</guid>
      <description>Amounts Amounts which make up the transaction. Absent amounts have zero value.  Name Type Required Default Restrictions Description   requestAmount LedgerAmount optional   The transaction amount requested by the customer to be authorised or approved. This is the total amount the customer wishes to pay for a service or virtual product.   approvedAmount LedgerAmount optional   The transaction amount which was approved by the upstream entity.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/getting-started/</guid>
      <description>The Single Use Voucher Service Interface is a RESTful HTTP based messaging protocol, intended to enable interoperability between single use voucher vendors and retailers.
Throughout the Single Use Voucher Service Interface documentation and API the term &amp;lsquo;single use voucher&amp;rsquo; and &amp;lsquo;single use voucher vendor&amp;rsquo; may be abbreviated to simply &amp;lsquo;voucher&amp;rsquo; and &amp;lsquo;voucher vendor&amp;rsquo; respectively.
The Single Use Voucher Service interface is licensed under an Apache 2.0 license.
Language Support Java The Electrum implementation of the Single Use Voucher Service Interface is written in Java.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/specification/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/specification/introduction/</guid>
      <description> Version 1.12.0
The Electrum SUV Service describes an interface for single use voucher transactions.
Email Electrum Support
Licensed under Apache 2.0
Security Definitions httpBasic   type basic   description All requests require HTTP basic authentication, where user name equals the value used in Client.Institution.id and password has been agreed with Electrum.   </description>
    </item>
    
    <item>
      <title>Message Flows</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/messageflows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/messageflows/</guid>
      <description>Voucher Provision The voucher provision message flow works in the following manner:
 The voucher acquirer sends a request for a new voucher to be provisioned The voucher vendor sends through a response message that the encapsulates the information about the voucher that was requested to be provisioned. The voucher acquirer sends through a provision confirmation that finalises and completes the transaction.   Voucher Redemption The voucher redemption process differs from the voucher provision mechanism in that the messging flow takes on a single messaging paradigm in contrast to the dual messaging paradigm used by the voucher provisioning process.</description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/specification/operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/specification/operations/</guid>
      <description>redeemVoucher Redeems a voucher.
POST /redemptions
This operation is performed when a voucher is used as a form of tender. When used as a form of tender the consumer redeems the requestAmount against the voucher. The voucher vendor is responsible for authorizing the redemption. Once redeemed, the voucher may not be used as a form of tender again.
Security  httpBasic  Request Content-Type: application/json
Parameters  Name Located in Required Description Default Schema</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/overview/</guid>
      <description>The Electrum Single Use Voucher describes an interface for voucher based transactions. This includes purchasing vouchers, redeeming against vouchers and refunding redeemed vouchers.
Version: 1.0.0
Contact information:
Electrum Support
support@electrum.co.za
License: Apache 2.0</description>
    </item>
    
    <item>
      <title>Protocol Basics</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/protocolbasics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/protocolbasics/</guid>
      <description>The Single Use Voucher Service Interface is an HTTP RESTFul interface.
Terminology The Single Use Voucher Service Interface documentation utilises several terms and for clarification these terms are now presented below for brevity.
Upstream And Downstream Entities Upstream and downstream impart a convention for the direction for a request and its response. A request message (such as a voucher request) typically originates at a merchant location and must be sent to the voucher vendor for provisioning.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/specification/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/specification/release-notes/</guid>
      <description>This page describes changes to the Single Use Voucher Service Interface implemented across different releases of the interface.
v1.12.0 Released 19 August 2020
 Updated ErrorDetail.ErrorType to include the following new value:  VOUCHER_STATUS_UNKNOWN - This errorType is shown when upstream has indicated that they cannot resolve the exact status of a requested voucher.    v1.11.0 Released 03 August 2020
 Corrects breaking changes introduced in v1.7.0 and v1.</description>
    </item>
    
    <item>
      <title>Single Use Voucher Service Interface</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/</guid>
      <description>Electrum Payments connects businesses together to transact with each other easily and robustly. This Single Use Voucher Service Interface documents the messaging interface used by Electrum to connect acquirers, processors, and voucher vendors together for performing single use voucher transactions.
The interface provides for all stages in the lifecycle of a single use voucher. The lifecycle of a single use voucher can be encapsulated into two major phases - namely the provisioning of the voucher and the redemption of the previously provisioned voucher.</description>
    </item>
    
    <item>
      <title>Swagger</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/specification/swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/specification/swagger/</guid>
      <description>The swagger (Open API) definition of the interface specification can be found here, as well as below.
Many tools are available for processing swagger files, and using a code generation tool to create a boilerplate client or server can be an excellent starting point for development. We highly recommend looking at swagger-codegen for a generator in your preferred language when starting out.
Swagger definition --- swagger: &amp;quot;2.0&amp;quot; info: description: &amp;quot;The Electrum SUV Service describes an interface\ \ for single use voucher transactions.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://electrumpayments.github.io/suv-service-interface-docs/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://electrumpayments.github.io/suv-service-interface-docs/testing/</guid>
      <description>When developing a server or client implementation of the Suv Service Interface it is important to verify that the implementation conforms to the Suv Service Interface specification. To test client implementations a test server is available at https://suv-service-test-pack.herokuapp.com. To test server implementations a test pack containing Postman scripts is available here.
Note that the test pack is made available simply as a tool to help test and investigate common implementation issues.</description>
    </item>
    
  </channel>
</rss>